{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/moliver/code/js/nextjs/meetups/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    desc: props.meetupData.desc\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const user = process.env.MONGO_USER;\n  const pw = process.env.MONGO_PASSWORD;\n  const dbName = process.env.MONGO_DB_NAME;\n  const client = await MongoClient.connect(`mongodb+srv://${user}:${pw}@cluster0.1ykyz.mongodb.net/${dbName}?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\"); // find => first object to filter entires (empty = all), send which fields\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const user = process.env.MONGO_USER;\n  const pw = process.env.MONGO_PASSWORD;\n  const dbName = process.env.MONGO_DB_NAME;\n  const meetupId = context.params.meetupId;\n  console.log(\"meetupId from params.meetupId\", meetupId);\n  const client = await MongoClient.connect(`mongodb+srv://${user}:${pw}@cluster0.1ykyz.mongodb.net/${dbName}?retryWrites=true&w=majority`);\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  console.log(\"meetups collection\", meetupsCollection);\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  console.log(\"selectedMeetup data\", selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: _objectSpread(_objectSpread({}, selectedMeetup), {}, {\n        _id: selectedMeetup._id.toString()\n      })\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/moliver/code/js/nextjs/meetups/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","desc","getStaticPaths","user","process","env","MONGO_USER","pw","MONGO_PASSWORD","dbName","MONGO_DB_NAME","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","selectedMeetup","findOne"],"mappings":"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","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      img={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      desc={props.meetupData.desc}\n    />\n  );\n}\n\nexport async function getStaticPaths() {\n  const user = process.env.MONGO_USER;\n  const pw = process.env.MONGO_PASSWORD;\n  const dbName = process.env.MONGO_DB_NAME;\n\n  const client = await MongoClient.connect(\n    `mongodb+srv://${user}:${pw}@cluster0.1ykyz.mongodb.net/${dbName}?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  // find => first object to filter entires (empty = all), send which fields\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const user = process.env.MONGO_USER;\n  const pw = process.env.MONGO_PASSWORD;\n  const dbName = process.env.MONGO_DB_NAME;\n\n  const meetupId = context.params.meetupId;\n  console.log(\"meetupId from params.meetupId\", meetupId);\n\n  const client = await MongoClient.connect(\n    `mongodb+srv://${user}:${pw}@cluster0.1ykyz.mongodb.net/${dbName}?retryWrites=true&w=majority`\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  console.log(\"meetups collection\", meetupsCollection);\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId),\n  });\n\n  console.log(\"selectedMeetup data\", selectedMeetup);\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: { ...selectedMeetup, _id: selectedMeetup._id.toString() },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}